#include<iostream>
#include<vector>
#include<queue>

using namespace std;
#define pii pair<int,int>
const int maxn = 1000;

int n,m; // vert n edge
int dist[maxn]{}; // total weight at a vert
int parents[maxn]{}; // backtracking


vector< pii > adj[maxn]; // vert and its neighbour


void dijstrka(int s) // s for source;
{
    for(int i=0; i<=n;i++)
        dist[i]= 9999;

    dist[s]=0;
    parents[s]=-1;

    priority_queue<pii, vector<pii>, greater<pii> > heap;
    heap.push({0,s});

    while(!heap.empty())
    {
        pii temp = heap.top();
        heap.pop();

        int w = temp.first;
        int u = temp.second;

        if(dist[u]<w)
            continue;

        for(pii q : adj[u])
        {
            int v = q.first;
            int cuv = q.second;

            if(dist[v] > dist[u]+cuv)
            {
                dist[v] = dist[u] + cuv;
                parents[v]= u;
                heap.push({dist[v],v});
            }
        }
    }
}

void relaxation(int u)
{
    for( pii q : adj[u])
    {
        int v = q.first;
        int cuv = q.second;

        if(dist[v]> (dist[u]+cuv))
        {
            dist[v] = dist[u]+cuv;
        }
    }
}



void bellman_ford(int n)
{
    for(int t=1; t<n;t++)
    {
        for(int i=1;i<=n;i++)
        {
            relaxation(i);
        }
    }
}


int main()
{
    // u->v =w, undirected graph
    cin >> n >> m;
    for(int i=1;i<=m;i++)// cin edgeds;
    {
        int u,v,w;
        cin >> u >> v >> w;
        adj[u].push_back( {v,w});
      //  adj[v].push_back( {u,w});
    }

/* dijsktra
    int s, q;
    cin >> s >> q;
    dijstrka(s);
    cout << dist[q];
    cout<<endl;
    while(q!=-1)
    {
        cout << q << " ";
        q = parents[q];
    }
*/

for(int i=0; i<=n; i++)
        dist[i] = 9999;
dist[1 ]=0;

bellman_ford(n);
for(int i=1;i<=n;i++)
{
    cout<<i<<": "<<dist[i]<<endl;
}



return 0;
}
